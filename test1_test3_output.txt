Calculating graph edit distance for the two files:
test1
test3
Distance between the two files: 4.215610859728507. Normalised: 0.22187425577518458
The given files are semantically similar.
Edit path:
Node 
Node ID =Line_5 -> Node ID =Line_5
Source Code =public static void main(String[] args) {
		int x = 1;
		while (x < 10) {
			if (x == 1) {
				System.out.println("one");
			}
			if (x == 3) {
				System.out.println("three");
			}
			if (x == 5) {
				System.out.println("five");
			}
			System.out.println(x);
			if (x < 5) {
				x = x + 2;
			} else {
				x++;
				double rand = Math.random();
				System.out.println(rand);
			}
		}
	} -> Source Code =public static void main(String[] args) {
		int x = 1;
		while (x < 10) {
			if (x == 1) {
				System.out.println("one");
			}
			if (x == 3) {
				System.out.println("three");
			}
			if (x == 5) {
				System.out.println("five");
			}
			if (x == 7) {
				System.out.println("seven");
			}
			System.out.println(x);
			if (x < 5) {
				x = x + 2;
			} else {
				x++;
				double rand = Math.random();
				System.out.println(rand);
			}
		}
	}
Syntactic Type =Method.Name -> Syntactic Type =Method.Name
Cost= 0.11764705882352941

Node 
Node ID =Line_6 -> Node ID =Line_6
Source Code =int x = 1 -> Source Code =int x = 1
Syntactic Type =VariableDeclarationExpr -> Syntactic Type =VariableDeclarationExpr
Cost= 0.15384615384615385

Node 
Node ID =Line_16 -> Node ID =Line_19
Source Code =System.out.println("five") -> Source Code =System.out.println("seven")
Syntactic Type =MethodCallExpr -> Syntactic Type =MethodCallExpr
Cost= 0.4

Node 
Node ID =Line_17 -> Node ID =Line_20
Source Code =System.out.println(x) -> Source Code =System.out.println(x)
Syntactic Type =MethodCallExpr -> Syntactic Type =MethodCallExpr
Cost= 0.25

Node 
Node ID =Line_18 -> Node ID =Line_21
Source Code =if (x < 5) {
				x = x + 2;
			} else {
				x++;
				double rand = Math.random();
				System.out.println(rand);
			} -> Source Code =if (x < 5) {
				x = x + 2;
			} else {
				x++;
				double rand = Math.random();
				System.out.println(rand);
			}
Syntactic Type =IfStmt -> Syntactic Type =IfStmt
Cost= 0.29411764705882354

Node 
Node ID =Line_21 -> Node ID =Line_24
Source Code =} else {
				x++;
				double rand = Math.random();
				System.out.println(rand);
			} -> Source Code =} else {
				x++;
				double rand = Math.random();
				System.out.println(rand);
			}
Syntactic Type =Other -> Syntactic Type =Other
Cost= 0.5

Node 
Node ID =Line_21 -> Node ID =Line_24
Source Code =x++ -> Source Code =x++
Syntactic Type =UnaryExpr -> Syntactic Type =UnaryExpr
Cost= 0.5

Node 
ε -> Node ID =Line_16
ε -> Source Code =System.out.println("five")
ε -> Syntactic Type =MethodCallExpr
Cost= 1.0

Node 
ε -> Node ID =Line_17
ε -> Source Code =if (x == 7) {
				System.out.println("seven");
			}
ε -> Syntactic Type =IfStmt
Cost= 1.0

